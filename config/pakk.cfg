# TODO: Instructions

# Setup environment variables:
#  - PAKK_CONFIG_DIR: Path to the pakk config directory
#  - PAKK_CONFIG_FILE: (opt.) Path to the pakk config file

# The template file can define placeholder, that are inquired at pakk setup
# The placeholder are defined in the following format: [[Placeholder text||Default value]]
# Comments above a placeholder are used as description for the placeholder (if starting with a single #, if you want to exclude a comment line at setup, use ##)


[Main]
# Root directory for all pakkage related data.
## The subdirectories defined in [Main.Subdirs] will be created in this directory, except you define them as absolute paths.
data_root_dir = ${HOME}/pakk/
# Directory for application data from pakkages, like models, symlinks, etc.
app_data_dir = /opt/pakk/
# Directory for log files
log_dir = /var/pakk/logs
# Directory for service files
service_dir = /etc/pakk/services

[Main.Subdirs]
# Storing cache information for faster discovery
cache_dir = cache
# Storing fetched and uninstalled pakkages
fetched_dir = fetched
# Storing all installed pakkages
pakkages_dir = pakkages
# Directory for dynamic data created by the modules
pakkage_data_dir = pakkage_data
# Subdirectory for all installed pakkages besides the subdirectories given by the pakkage types
all_pakkges_dir = ${pakkages_dir}/_all

[Main.Pakkage]
# Name of the file containing the pakkage configuration information in your pakkage repository
# Default: pakk.cfg
# Support multiple files like: pakk.cfg, myCfgName.cfg
pakkage_files = pakk.cfg

[AutoUpdate]
project_url = https://icampusnet.th-wildau.de/ros-e/software/infrastructure/pakk-package-manager.git
project_access_token = glpat-6rgx45q2xAJ6dR-NhsdV

# See https://python-gitlab.readthedocs.io/en/stable/cli-usage.html#cli-configuration
[GitLab.Connection]
# The root URL of your gitlab instance
url = https://icampusnet.th-wildau.de

# copy your private access token with read_api access / read_api scope here
# https://icampusnet.th-wildau.de/-/profile/personal_access_tokens
# private_token =

api_version = 4
ssl_verify = True
timeout = 10

[GitLab.Projects]
# The gitlab group id containing your possible pakk projects
group_id = 30
include_archived = False


[Discoverer.GitLab]
# If num_workers is > 1, the discoverer will use multithreading to fetch multiple pakkages at once.
num_workers = 8

[Fetcher.GitLab]
# If num_workers is > 1, the fetcher will use multithreading to fetch multiple pakkages at once.
num_workers = 4

[Types]
pakk.modules.types.type_setup:TypeSetup
pakk.modules.types.type_python:TypePython
pakk.modules.types.type_ros2:TypeRos2
pakk.modules.types.type_asset:TypeAsset
pakk.modules.types.type_web:TypeWeb

[Type.ROS2]
# Whether to use dockerized pakkages for ROS2 or not
dockerized = False

[Env.Docker]
# Path to store dockerfiles for containerized pakkages
dockerfiles_dir = ${Main:data_root_dir}/env/dockerfiles

[Env.ROS2]
# The path to your ROS workspace root used for ROS package installation
ws_dir = ${Main:data_root_dir}/env/ros2

[Env.Python]
# The path to the directory, where python packages (dependencies of ROS packages) are installed
python_package_path = None

[Env.Nginx]
locations = ${Main:data_root_dir}/env/nginx/locations
